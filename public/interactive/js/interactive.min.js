if(console.log("INTERACTIVE BUILD ON: Aug 9 2024 3:33:47 PM"),null==si)var si={};function siLog(){var e=[],o="[]",i=arguments[0],s="‚ùå",a="",l="",t="",n=arguments[1];if(e[0]=arguments[0]||"",e[1]=arguments[1]||"",e[2]=arguments[2]||"",e[3]=arguments[3]||"",e[4]=arguments[4]||"",arguments.length<2){o="[ü§öSSI]";a="üí°SIMPLE",l=e[0],t=""}else"pipwerks"===i?d.apply(this,arguments):c.apply(this,arguments);a.indexOf("API:")>-1?setTimeout((function(){console.groupCollapsed(o+a+l,t),console.trace("Stack trace:"),console.groupEnd()}),1):(console.groupCollapsed(o+a+l+" "+t),console.trace("Stack trace:"),console.groupEnd());var r={label:o,action:a,key:l,value:t};function d(){i="PIP:SCORM","string"==typeof arguments[1]&&(n.indexOf("SCORM.data")>-1&&(s="üíæ",n.indexOf(".get")>-1?(n=n.replace(/SCORM.data.get\(/gi,""),a="‚è™ GET"):n.indexOf(".set")>-1&&(n=n.replace(/SCORM.data.set\(/gi,""),a="SET ‚è©"),n=n.replace(/\)/gi,":"),l=n.split("  value: ")[0]||"",t=n.split("  value: ")[1]||""),(n.indexOf("SCORM.connection")>-1||n.indexOf("connection.initialize")>-1)&&(s="üîå",n.indexOf(".initialize")>-1?(n=n.replace(/SCORM.connection.initialize /gi,""),a="ü§ù INIT",n.indexOf("connection.initialize called.")>-1&&(n=n.replace(/connection.initialize called./gi,""),l="Initializing LMS connection...")):n.indexOf(".terminate")>-1&&(n=n.replace(/SCORM.connection.terminate /gi,""),a="üíÄ TERM"),(n.indexOf("failed")>-1||n.indexOf("aborted")>-1)&&(n=(n=n.replace(/failed/gi,"‚ùå FAILED")).replace(/aborted/gi,"‚ùå ABORTED"))),n.indexOf("API")>-1&&(s="üìñ",n.indexOf(".find")>-1&&(n=(n=n.replace(/SCORM.API.find: /gi,"")).replace(/. Version: /gi,": v"),a="üîç FIND",t="(It will be available for inspection in a few ticks.)"),n.indexOf("API:")>-1&&(a="üîó API",setTimeout((function(){l=pipwerks.SCORM.API.handle}),1)))),""!==a&&(a="("+a+") "),l=l||n,t=isNaN(parseInt(t,10))?t:parseInt(t,10),o="["+s+i+"] "}function c(){i="SSI:"+i,s="ü§ö",a=e[1]||"",l=e[2]||"",t=e[3]||"","string"==typeof arguments[1]&&("SET"===e[1]?a="(SET ‚è©) ":"GET"===e[1]?a="(‚è™ GET) ":"INIT"===e[1]?a="(ü§ù INIT) ":"COMPLETE"===e[1]?a="(üèÜ COMPLETE) ":"INFO"===e[1]?a="(üí° INFO) ":"API"===e[1]&&(a="(üîó API) "),e[2].indexOf("SUCCESS")>-1&&(l="‚úÖ "+e[2]),e[2].indexOf("ERROR")>-1&&(l="‚ùå "+e[2])),t=isNaN(parseInt(t,10))?t:parseInt(t,10),o="["+s+i+"] "}si.log.push(r)}function nextSlide(){Reveal.right()}function prevSlide(){Reveal.left()}function downSlide(){Reveal.down()}function upSlide(){Reveal.up()}function nextHide(){$("#si-next").hide()}function nextShow(){$("#si-next").show()}function backHide(){$("#si-back").hide()}function backShow(){$("#si-back").show()}function jumpToSlide(e){Reveal.slide(e-1)}function jumpToId(e){var o=slides[e].slideNumber;Reveal.slide(o-1)}function lock(e){e.addClass("noEvents"),e.attr("disabled","disabled")}function unlock(e){e.removeClass("noEvents"),e.removeAttr("disabled")}function setPath(e){return!checkWholePath(e)&&lmsConnected&&setScormIncomplete(),saveData.pathSelected=e}function getCompletionStatus(e){if(e&&"@"===e[0])return checkWholePath(e.split("@")[1]);var o=e||globalVar.curSlide,i=slides[o],s=o===globalVar.curSlide,a=saveData.slideCompletion,l=saveData.pathSelected,t=i.completionPath,n=a.mainPath;return t&&(Array.isArray(t)?l&&t.indexOf(l)>=0?n=a[l]:(n=a[t[0]],s&&setPath(t[0])):(n=a[t],s&&setPath(t))),n[o]}function checkWholePath(e){var o=saveData.slideCompletion[e];for(var i in o)if(!o[i])return 0;return 1}function completeSlide(){if(slides[globalVar.curSlide].include){var e=globalVar.curSlide,o=slides[e].completionPath,i=saveData.slideCompletion;o?Array.isArray(o)?o.forEach((function(o,s){i[o][e]=1})):i[o][e]=1:i.mainPath[e]=1}}function customNavStyle(e,o,i){var s,a=$("#si-"+e),l=a.html(),t=slides[globalVar.curSlide];i&&a.html(i),a.addClass(o),t.onExitAction=(s=t.onExitAction,function(){s&&s.apply(this),a.html(l),a.removeClass(o)})}function instaCheatAddon(){}function devMode(){$("body").addClass("dev-mode"),console.log("GOD MODE!"),$("#guidelines").show(),$(document).keyup((function(e){71==e.which&&("none"!=$("#guidelines").css("display")?$("#guidelines").hide():$("#guidelines").show()),e.shiftKey&&37==e.which&&Reveal.left(),e.shiftKey&&39==e.which&&Reveal.right(),e.shiftKey&&38==e.which&&Reveal.up(),e.shiftKey&&40==e.which&&Reveal.down(),74===e.which&&(simpleModalClose(),simpleModalOpen("positive")),75===e.which&&(simpleModalClose(),slides[globalVar.curSlide].modal.negative?simpleModalOpen("negative"):slides[globalVar.curSlide].modal.negative1&&simpleModalOpen("negative1")),76===e.which&&(simpleModalClose(),simpleModalOpen("negativeFinal")),49===e.which&&slides[globalVar.curSlide].modal.hs1&&(simpleModalClose(),simpleModalOpen("hs1")),50===e.which&&slides[globalVar.curSlide].modal.hs2&&(simpleModalClose(),simpleModalOpen("hs2")),51===e.which&&slides[globalVar.curSlide].modal.hs3&&(simpleModalClose(),simpleModalOpen("hs3")),52===e.which&&slides[globalVar.curSlide].modal.hs4&&(simpleModalClose(),simpleModalOpen("hs4")),53===e.which&&slides[globalVar.curSlide].modal.hs5&&(simpleModalClose(),simpleModalOpen("hs5")),54===e.which&&slides[globalVar.curSlide].modal.hs6&&(simpleModalClose(),simpleModalOpen("hs6")),55===e.which&&slides[globalVar.curSlide].modal.hs7&&(simpleModalClose(),simpleModalOpen("hs7")),56===e.which&&slides[globalVar.curSlide].modal.hs8&&(simpleModalClose(),simpleModalOpen("hs8")),57===e.which&&slides[globalVar.curSlide].modal.hs9&&(simpleModalClose(),simpleModalOpen("hs9")),186==e.which&&simpleModalClose()}))}si.log=[],si.formatLog=function(){window.console.table?console.table(si.log):console.log(si.log)},pipwerks.UTILS.trace=function(e){pipwerks.debug.isActive&&window.console&&window.console.log&&siLog("pipwerks",e)},$("#btn-start").on("click",(function(){jumpToSlide(2),siAudio.sfx.click.play()})),$((function(){slides={start:{type:"text",navElements:["clock"],backAction:function(){},onEnterAction:function(){},audio:{},include:!1},intro:{type:"text",navElements:["standard-menu","!menu","home","next"],backAction:prevSlide,onEnterAction:function(){},audio:{},include:!1},v1:{type:"video",navElements:["standard-menu","!progress","!logo","!menu","home"],backAction:prevSlide,nextAction:function(){completeSlide(),nextSlide()},onEnterAction:function(){},videoLoaded:!1},i1:{type:"quiz",navElements:["standard-menu","submit","!menu","home"],nextAction:function(){completeSlide(),nextSlide()},backAction:prevSlide,onEnterAction:function(){},audio:{onEnter:"media/audio/vo/nothing.mp3",positive:"media/audio/vo/nothing.mp3",negative1:"media/audio/vo/nothing.mp3",negative2:"media/audio/vo/nothing.mp3",negativeFinal:"media/audio/vo/nothing.mp3"},quiz:{radio:!1,answers:{"i1-correct1":1,"i1-correct2":1,"i1-correct3":1},audio:{},userAttempts:2},modal:{positive:"i1-positive",negative:"i1-negative",negativeFinal:"i1-negative-final"},hotspot:{clickAnywhere:!0}},i2:{type:"quiz",navElements:["standard-menu","submit","!menu","home"],nextAction:function(){completeSlide(),nextSlide()},backAction:prevSlide,onEnterAction:function(){},audio:{onEnter:"media/audio/vo/nothing.mp3",positive:"media/audio/vo/nothing.mp3",negative1:"media/audio/vo/nothing.mp3",negative2:"media/audio/vo/nothing.mp3",negativeFinal:"media/audio/vo/nothing.mp3"},quiz:{radio:!0,answers:{"i2-correct":1},audio:{},userAttempts:2},modal:{positive:"i2-positive",negative:"i2-negative",negativeFinal:"i2-negative-final"},hotspot:{clickAnywhere:!0}},i3:{type:"dnd",navElements:["standard-menu","submit","reset","!menu","home"],nextAction:function(){completeSlide(),nextSlide()},backAction:prevSlide,onEnterAction:function(){},onExitAction:function(){},dnd:{type:"dnd_1",quiz:{i3_drop:["i3_drag2"]},dropCounter:{i3_drop:1},userAttempts:2,actions:{i3_drag1:{onDrop:{i3_drop:function(){$("#i3_drag2").draggable("option","disabled",!1),$("#i3_drag1").draggable("option","disabled",!0),$("#i3_drag2").removeClass("dropped"),$("#i3_drag1").addClass("dropped")}}},i3_drag2:{onDrop:{i3_drop:function(){$("#i3_drag1").draggable("option","disabled",!1),$("#i3_drag2").draggable("option","disabled",!0),$("#i3_drag1").removeClass("dropped"),$("#i3_drag2").addClass("dropped")}}}}},audio:{onEnter:"media/audio/vo/nothing.mp3",positive:"media/audio/vo/nothing.mp3",negative:"media/audio/vo/nothing.mp3",negativeFinal:"media/audio/vo/nothing.mp3"},modal:{positive:"i3-positive",negative:"i3-negative",negativeFinal:"i3-negative-final"},hotspot:{clickAnywhere:!0}},end:{type:"text",navElements:["exit-slide","home","!exit"],backAction:prevSlide,nextAction:function(){},onEnterAction:function(){setScormCompletion()},audio:{},include:!1}}}));var $siModalCloser=$.parseHTML('<button class="si-modal-closer si-modal-closer__js"><img class="si-img-swap__js inject-me" src="./media/imgs/navigation/classic/close-cross.svg" alt="" /></button>');function disableButtons(e){$(e).addClass("noEvents"),$(e).attr("disabled","disabled")}function enableButtons(e){$(e).removeClass("noEvents"),$(e).removeAttr("disabled")}function threeDNavigationSetup(){$(".rightButton").on("click.threedcarousel",(function(){threeDMove("right")})),$(".leftButton").on("click.threedcarousel",(function(){threeDMove("left")})),threeDButtons=slides[globalVar.curSlide].items=$(".threedb"),slides[globalVar.curSlide].clicks=0,disableButtons(threeDButtons),enableButtons(threeDButtons[0]),cssSetup()}function cssSetup(){var e=$(".threedb"),o=e.length;e.each((function(e,i){$(i).addClass("item"+(e+1)+"of"+o+" "+o+"items")}))}function threeDMove(e){var o,i=slides[globalVar.curSlide].items,s=slides[globalVar.curSlide].clicks,a=$(".threedb").length;switch(e){case"right":o=a-1;break;case"left":o=1}i.each((function(e,l){var t=(e+s)%a+1,n=(e+o+s)%a+1;$(l).removeClass("item"+t+"of"+a),$(l).addClass("item"+n+"of"+a),1===n&&(disableButtons(i),disableButtons(this),enableButtons(l))})),s+=o,slides[globalVar.curSlide].clicks=s}$(".si-modal__js").append($siModalCloser);var siAudio={};function initAudio(){for(key in siAudio.sfx={},siAudio.sfx.click=new Howl({src:["media/audio/sounds/mouse_click.mp3"],volume:.8}),siAudio.sfx.wrong=new Howl({src:["media/audio/sounds/negative.mp3"],volume:.5}),siAudio.sfx.right=new Howl({src:["media/audio/sounds/positive.mp3"],volume:.5}),siAudio.sfx.nothing=new Howl({src:["media/audio/sounds/nothing.mp3"]}),slides)if(siAudio[key]={},slides[key].audio){var e=slides[key].audio;for(track in e)siAudio[key][track]=new Howl({src:e[track]})}else slides[key].audio={}}function videoCheck(){if("video"==slides[globalVar.curSlide].type){globalVar.$curSlide.find("video")[0];var e=globalVar.$curSlide.find("video")[0].id;0==slides[globalVar.curSlide].videoLoaded?(videojs(e,{language:"en",autoplay:!0,controlBar:{volumePanel:{inline:!0}},html5:{nativeTextTracks:!1},plugins:{videoJsResolutionSwitcher:{default:"high",dynamicLabel:!0},hotkeys:{enableNumbers:!1,enableModifiersForNumbers:!1,alwaysCaptureHotkeys:!0},seekButtons:{back:10}}}).ready((function(){if(globalVar.devMode||slides[globalVar.curSlide].videoSeeking||!1!==slides[globalVar.curSlide].videoSeeking&&!1!==globalVar.video.progressControl||videojs(e).controlBar.progressControl.disable(),videojs(e).textTracks().tracks_.length>0){videojs(e).textTrackSettings.setValues({backgroundOpacity:"0.5",edgeStyle:"dropshadow",color:"#FFF",backgroundColor:"#000",textOpacity:"1",windowOpacity:"0",fontFamily:"proportionalSansSerif",windowColor:"#FFF"}),videojs(e).textTrackSettings.updateDisplay()}slides[globalVar.curSlide].videoLoaded=!0,videojs(e).play()})),videojs(e).on("ended",(function(){globalVar.videoSeen[globalVar.curSlide]=!0,slides[globalVar.curSlide].nextAction()})),globalVar.fadeNavigation&&(videojs(e).on("useractive",(function(){$("#si-nav-container").removeClass("vjs-fade-out")})),videojs(e).on("userinactive",(function(){videojs(e).paused()||$("#si-nav-container").addClass("vjs-fade-out")})))):(videojs(e).currentTime(0),videojs(e).play())}else $("section").find("video").length>0&&$("section").find("video")[0].pause()}var unlockerSound=new Howl({src:["media/audio/sounds/nothing.mp3"]});function initPreloader(){window.onload=function(){$("#preloader_text_1").fadeOut("slow",(function(){$("#preloader_text_2").fadeIn("slow")})),$("#Preloader").on("click touch",(function(e){e.preventDefault(),siAudio.sfx.click.play(),hidePreloader()}))}}function hidePreloader(){$("#Preloader").fadeOut("slow",(function(){$("section.present").fadeIn("slow",(function(){if(void 0!==slides[globalVar.curSlide]&&"video"==slides[globalVar.curSlide].type){var e=globalVar.$curSlide.find("video")[0];videojs(e.playerId).play()}}))}))}function initFeedbacks(){var e=$(".si-modal-container__js"),o=$(".si-modal__js"),i=$(".si-modal-closer__js");o.on("click.prevent",(function(e){var o=slides[globalVar.curSlide].hotspot,i=o&&o.clickAnywhere;e.preventDefault(),i||e.stopPropagation()})),e.on("click.close",(function(){modalClosingActions()})),i.each((function(e,o){$(o).on("click.close",(function(){modalClosingActions()}))}))}function answerCorrect(){var e=slides[globalVar.curSlide].modal.positive;$(".si-modal-container__js").addClass("si-modal-container-open"),$("#"+e).addClass("si-current-modal"),globalVar.currentModal=e,globalVar.currentModalType="positive";var o=slides[globalVar.curSlide].type;slides[globalVar.curSlide][o].trys=0,siAudio[globalVar.curSlide].positive?(siAudio.sfx.right.once("end",(function(){siAudio[globalVar.curSlide].positive.play()})),siAudio.sfx.right.play()):siAudio.sfx.right.play(),"function"==typeof slides[globalVar.curSlide].onSuccessAction&&slides[globalVar.curSlide].onSuccessAction()}function answerIncorrect(){var e,o=slides[globalVar.curSlide].type,i=slides[globalVar.curSlide][o].trys,s=slides[globalVar.curSlide][o].userAttempts,a=$(".si-modal-container__js");(0===s?i=0:i++,slides[globalVar.curSlide][o].trys=i,i<s||0===s)?(slides[globalVar.curSlide].modal["negative"+i]?(e=slides[globalVar.curSlide].modal["negative"+i],globalVar.currentModal=e,globalVar.currentModalType="negative"+i):slides[globalVar.curSlide].modal.negative&&(e=slides[globalVar.curSlide].modal.negative,globalVar.currentModal=e,globalVar.currentModalType="negative"),a.addClass("si-modal-container-open"),$("#"+e).addClass("si-current-modal"),siAudio[globalVar.curSlide]["negative"+i]?(siAudio.sfx.wrong.once("end",(function(){siAudio[globalVar.curSlide]["negative"+i].play()})),siAudio.sfx.wrong.play()):siAudio[globalVar.curSlide].negative?(siAudio.sfx.wrong.once("end",(function(){siAudio[globalVar.curSlide].negative.play()})),siAudio.sfx.wrong.play()):siAudio.sfx.wrong.play(),"function"==typeof slides[globalVar.curSlide].onFailureAction1&&slides[globalVar.curSlide].onFailureAction1()):0!==s&&i===s&&(e=slides[globalVar.curSlide].modal.negativeFinal,globalVar.currentModal=e,globalVar.currentModalType="negativeFinal",a.addClass("si-modal-container-open"),$("#"+e).addClass("si-current-modal"),slides[globalVar.curSlide][o].trys=0,siAudio[globalVar.curSlide].negativeFinal?(siAudio.sfx.wrong.once("end",(function(){siAudio[globalVar.curSlide].negativeFinal.play()})),siAudio.sfx.wrong.play()):siAudio.sfx.wrong.play(),"function"==typeof slides[globalVar.curSlide].onFailureAction2&&slides[globalVar.curSlide].onFailureAction2())}function handleAnswer(e){if(Howler.stop(),slides[globalVar.curSlide].modal.noFeedback){var o="function"==typeof slides[globalVar.curSlide].nextAction;e?"function"==typeof slides[globalVar.curSlide].onSuccessAction&&slides[globalVar.curSlide].onSuccessAction():"function"==typeof slides[globalVar.curSlide].onFailureAction1&&slides[globalVar.curSlide].onFailureAction1(),o?slides[globalVar.curSlide].nextAction():nextSlide()}else 1==e?answerCorrect():answerIncorrect()}function closeFeedbackAction(e){var o="function"==typeof slides[globalVar.curSlide].nextAction;switch(e){case"positive":o?slides[globalVar.curSlide].nextAction():nextSlide();break;case"negative":break;case"hotspot":handleHotspotClose();break;case"negativeFinal":o?slides[globalVar.curSlide].nextAction():nextSlide()}}function FBKeyboard(){var e,o=$(".si-current-modal").children().children();e=$(o[0]).hasClass("ie9hack")?1:0,$(o[e]).focus(),$("body").on("keydown.drag",(function(i){switch(i.keyCode){case 9:i.preventDefault(),e<o.length-1?e+=1:e=0,$(o[e]).focus();break;case 27:case 13:$(".si-current-modal").trigger("click"),$(document.activeElement).blur();break;default:return!0}}))}function handleHotspotClose(){var e=slides[globalVar.curSlide].hotspot,o=$("#"+globalVar.curSlide).find(" .hotspot-button__js"),i=globalVar.hotspotIdx,s=o[i],a="#"+globalVar.currentModal,l=e.onModalClose,t=e.indv[i+1]&&e.indv[i+1].onModalClose,n="you haven't created a modal for this hotspot";slides[globalVar.curSlide].hotspot.clickChecker[i+1].seen=!0,l&&l(s,a||n),t&&t(s,a||n);var r,d,c,u,p=!0;for(var f in slides[globalVar.curSlide].hotspot.clickChecker)if(!1===slides[globalVar.curSlide].hotspot.clickChecker[f].seen&&!slides[globalVar.curSlide].hotspot.clickChecker[f].hasCorrectClass){p=!1;break}p&&(e.customCompleteAction?e.customCompleteAction():slides[globalVar.curSlide].nextAction()),!0===e.linear&&(r=o[i+1],d=e.indv[i+2],c=e.onUnlock,u=d&&d.onUnlock,o.removeClass(e.activeClass),unlock($(r)),$(r).addClass(e.activeClass),c&&c(r),u&&u(r))}function modalClosingActions(){switch(Howler.stop(),"hotspot"===slides[globalVar.curSlide].type&&slides[globalVar.curSlide].hotspot.hover?console.log("hover-hotspot, no click audio"):siAudio.sfx.click.play(),slides[globalVar.curSlide].type){case"dnd":resetDnD(slides[globalVar.curSlide].revertTime,globalVar.dndAnswers);break;case"sort":resetSort();break;case"quiz":resetQuiz()}closeFeedbackAction(globalVar.currentModalType),$("body").off("keydown.drag"),$(".si-modal-container__js").removeClass("si-modal-container-open si-hover-hotspot"),$("#"+globalVar.currentModal).removeClass("si-current-modal")}function simpleModalOpen(e){if(slides[globalVar.curSlide].modal[e]){var o=slides[globalVar.curSlide].modal[e];siAudio[globalVar.curSlide][e]&&siAudio[globalVar.curSlide][e].play(),$(".si-modal-container__js").addClass("si-modal-container-open"),$("#"+o).addClass("si-current-modal"),globalVar.currentModal=o}}function simpleModalClose(){Howler.stop(),$(".si-modal-container__js").removeClass("si-modal-container-open"),$("#"+globalVar.currentModal).removeClass("si-current-modal")}unlockerSound.on("unlock",(function(){hidePreloader(),unlockerSound.play()})),unlockerSound.on("play",(function(){hidePreloader()})),unlockerSound.play();var dndResetObject={};function resetDnD(e,o){for(key in globalVar.$curSlide.find(".draggable").each((function(){$(this).draggable("option","disabled",!1),$(this).removeClass("dropped");var o=$(this).data("OGPos");$(this).animate({top:o.top,left:o.left},e),$(this).data("dropId",""),$(this).data("curPos",{top:o.top,left:o.left}),$(this).data("prevPos",{top:o.top,left:o.left})})),globalVar.$curSlide.find(".droppable").each((function(){$(this).data("dragElements",[]),$(this).data("dropCounter",slides[globalVar.curSlide].dnd.dropCounter[this.id])})),o)o[key]=[];return"dnd_2"==slides[globalVar.curSlide].dnd.type&&(globalVar.$curSlide.find(".draggable").fadeIn(),globalVar.$curSlide.find(".draggable").removeClass("shrink")),globalVar.dndAnswers=o,o}function dndFunctions(){var e,o,i,s,a=globalVar.$curSlide.find(".draggable"),l=globalVar.$curSlide.find(".droppable"),t=generateAnswerTemplate();i=slides[globalVar.curSlide].dnd.revertTime?slides[globalVar.curSlide].dnd.revertTime:500,s=!slides[globalVar.curSlide].dnd.snapping||slides[globalVar.curSlide].dnd.snapping,0==slides[globalVar.curSlide].visited?(a.each((function(){var e=dndActions(this.id),o=(parseInt($(this).css("left"))/$(this).parent().width()*100).toString()+"%",a=(parseInt($(this).css("top"))/$(this).parent().height()*100).toString()+"%";$(this).data({OGPos:{top:a,left:o},curPos:{top:a,left:o},prevPos:{top:a,left:o},dropID:"",events:e,revertTime:i,snapping:s}),$(this).attr("tabindex","0"),keyBoardAccess(this)})),l.each((function(){$(this).data({dragElements:[],dropCounter:slides[globalVar.curSlide].dnd.dropCounter[this.id]}),$(this).attr("tabindex","-1")})),dndResetObject[globalVar.curSlide]={time:i,answers:t}):(a.each((function(){$(this).draggable("disable")})),l.each((function(){$(this).droppable("disable")})),resetDnD(i,t)),a.draggable({start:function(o,i){e=i.helper[0],$(e).data("events").onDragStart()},drag:function(o,i){dragging(e)},revert:"invalid",stack:".draggable",revertDuration:i,stop:function(o,i){dragStop(e)}}),l.droppable({accept:".draggable",over:function(i,s){o=i.target,$(e).data("events").onDragOver[o.id]&&$(e).data("events").onDragOver[o.id]()},drop:function(i,s){dropped(o,e)}}),a.each((function(){$(this).draggable("enable")})),l.each((function(){$(this).droppable("enable")}))}function dragging(e){$(e).data("events").onDrag()}function dragStop(e){$(e).data("events").onDragEnd()}function dropped(e,o){var i={top:0,left:0},s=$(o).data("snapping"),a=$(e).data("dragElements").length<$(e).data("dropCounter");for(key in s?(i.top=(parseInt($(e).css("top"))/$(e).parent().height()*100).toString()+"%",i.left=(parseInt($(e).css("left"))/$(e).parent().width()*100).toString()+"%"):(i.top=(parseInt($(o).css("top"))/$(".reveal").height()*100).toString()+"%",i.left=(parseInt($(o).css("left"))/$(".reveal").width()*100).toString()+"%"),$(o).data("events").onDrop[e.id]&&$(o).data("events").onDrop[e.id](),"dnd_2"==slides[globalVar.curSlide].dnd.type?a?dnd2Drop(o,e):revert(o):"dnd_1"==slides[globalVar.curSlide].dnd.type&&(a?dnd1Drop(o,e,i):swap(o,e,i)),slides[globalVar.curSlide].dnd.quiz)globalVar.dndAnswers[key]=$("#"+key).data("dragElements")}function dnd2Drop(e,o){$(o).data("dragElements").push(e.id),$(e).addClass("shrink"),$(e).data("dropped",!0)}function dnd1Drop(e,o,i){var s=$(e).data("dropId");if(s){var a=$("#"+s).data("dragElements").filter((function(o){e.id}));$("#"+s).data("dragElements",a)}updatePos(e,i),$(e).data("dropId",o.id),$(o).data("dragElements").push(e.id),move(e)}function swap(e,o,i){var s,a=$(e).data("dropId"),l=$(o).data("dragElements").pop(),t=$("#"+l),n=[];if(a){var r=$("#"+a).data("dragElements").filter((function(o){e.id}));r.push(l),$("#"+a).data("dragElements",r),s=$(e).data("curPos")}else s=$(t).data("OGPos"),t.removeData("dropId");(n=$("#"+o.id).data("dragElements").filter((function(e){}))).push(e.id),$("#"+o.id).data("dragElements",n),$(e).data("dropId",o.id),$(t).data("dropId",a),updatePos(t,s),updatePos(e,i),move(e),move(t)}function revert(e){var o=$(e).data("revertTime");$(e).animate({top:$(e).data("prevPos").top,left:$(e).data("prevPos").left},o)}function move(e){$(e).animate({top:$(e).data("curPos").top,left:$(e).data("curPos").left},300)}function updatePos(e,o){$(e).data("prevPos",$(e).data("curPos")),$(e).data("curPos",o)}function dndActions(e){var o={onDragStart:function(){},onDrag:function(){},onDragOver:{},onDragEnd:function(){},onDrop:{}};if(slides[globalVar.curSlide].dnd.actions)for(var i in slides[globalVar.curSlide].dnd.actions[e]||(slides[globalVar.curSlide].dnd.actions[e]={}),o)slides[globalVar.curSlide].dnd.actions[e][i]&&(o[i]=slides[globalVar.curSlide].dnd.actions[e][i]);else slides[globalVar.curSlide].dnd.actions={};return slides[globalVar.curSlide].dnd.actions[e]=o,o}function generateAnswerTemplate(){var e,o=0,i="";for(key in globalVar.dndAnswers={},slides[globalVar.curSlide].dnd.quiz){o++;var s='"'+key+'":[]';Object.keys(slides[globalVar.curSlide].dnd.quiz).length>=2&&o!=Object.keys(slides[globalVar.curSlide].dnd.quiz).length&&(s+=","),i+=s}return i="{"+i+"}",e=JSON.parse(i),globalVar.dndAnswers=e,e}function keyBoardAccess(e){var o=function(e){var i=globalVar.$curSlide.find(".droppable"),s=0,a=$(this);32===e.which&&($(i[s]).focus(),a.off("keydown.access"),dragging(a[0]),$("body").on("keydown.drag",(function(e){switch(e.keyCode){case 9:e.preventDefault();break;case 27:a.animate({top:a.data("originalTop"),left:a.data("originalLeft")},revertTime),a.focus(),a.on("keydown.access",o),$("body").off("keydown.drag");break;case 38:s<i.length-1?s+=1:s=0,$(i[s]).focus();break;case 40:s>0?s-=1:s=i.length-1,$(i[s]).focus();break;case 13:dropped(i[s],a[0]),"dnd_2"===slides[globalVar.curSlide].dnd.type?a.blur():a.focus(),a.on("keydown.access",o),$("body").off("keydown.drag");break;default:return!0}})))};$(e).on("keydown.access",o)}function hotspotFunctions(){var e=$("#"+globalVar.curSlide).find(" .hotspot-button__js"),o=$(".si-modal-container__js"),i=[];e.each((function(e,o){console.log("broke"),slides[globalVar.curSlide].modal["hs"+(e+1)]?i.push(slides[globalVar.curSlide].modal["hs"+(e+1)]):console.log("There is not a corresponding modal for hotspot "+(e+1)+". Please disregard if you are not using modals for this slide.")})),console.log(i);var s,a={},l=slides[globalVar.curSlide],t=l.hotspot||{},n=t.correctClass||"correct",r=t.unlockedClass||"unlocked",d=t.completedClass||"completed",c=t.modalStyleClass||"modal-style",u=t.hotspotStyleClass||"hotspot-style",p=t.customCompleteAction||l.nextAction;t.correctClass=n,t.unlockedClass=r,t.selectedClass=s,t.completedClass=d,t.modalStyleClass=c,t.hotspotStyleClass=u,t.clickChecker=a,t.indv=t.indv||{},e.addClass(u),e.removeClass(d),e.removeClass(r),e.each((function(e,o){$(o).addClass(u+"-"+(e+1))})),i.forEach((function(e,o){$("#"+e).addClass(c).addClass(c+"-"+(o+1)),console.log($("#"+e)),t.clickAnywhere&&$("#"+e).addClass("modal-click-anywhere")})),t.correctHotspots&&t.correctHotspots.forEach((function(o){$(e[o-1]).addClass(n)}));for(var f=0;f<e.length;f++)if(a[f+1]=a[f+1]||{},a[f+1].seen=!1,t.correctClass){n=t.correctClass;a[f+1].hasCorrectClass=$(e[f]).hasClass(n)}else a[f+1].hasCorrectClass=!0;if(!t.audioSetup)for(var g in t.audio)t.audio[g]=new Howl({src:[t.audio[g]]}),t.audioSetup=!0;if(t.linear){if(t.quiz)throw'\nHotspot Error:\nyou cannot use "linear" and "quiz" together';if(t.correctHotspots)throw'\nHotspot Error:\nyou cannot use "linear" and "correctHotspots" together';e.removeClass(r),lock(e),unlock($(e[0])),$(e[0]).addClass(r)}else t.quiz&&(s=t.quiz.selectedClass||"selected-hotspot",e.removeClass(s),t.quiz.selectedAnswers=[],t.useModals=!1);function m(l,n){var c,u,f,g,m=t.onClick,h=t.indv[l+1]&&t.indv[l+1].onClick,v=$("#"+i[l]),b=i[l],S=$(n),k="you haven't created a modal for this hotspot";if(m&&m(n,i[l]||k),h&&h(n,i[l]||k),t.audio){for(var C in Howler.stop(),t.audio)t.audio[C].stop();t.audio[l+1]&&t.audio[l+1].play()}t.quiz?("scq"===t.quiz.type&&e.removeClass(s),S.toggleClass(s),t.quiz.selectedAnswers=[],e.each((function(e,o){$(o).hasClass(s)&&t.quiz.selectedAnswers.push(e+1)}))):!1===t.useModals?(a[l+1].seen=!0,$(n).addClass(d),function(e){var o=!0;for(var i in e)if(!1===e[i].seen&&!e[i].hasCorrectClass){o=!1;break}return o}(a)&&p(),!0===t.linear&&(c=e[l+1],u=t.indv[l+2],f=t.onUnlock,g=u&&u.onUnlock,e.removeClass(r),unlock($(c)),$(c).addClass(r),f&&f(c),g&&g(c))):(t.hover&&($(".si-modal-container__js").addClass("si-hover-hotspot"),e.each((function(e,i){S.off("mouseout.hotspot"),S.on("mouseout.hotspot",(function(){$(".si-modal-container__js").removeClass("si-hover-hotspot"),console.log("mouseout"),o.trigger("click")}))}))),console.log(v),$(".si-modal-container__js").addClass("si-modal-container-open"),v.addClass("si-current-modal"),globalVar.currentModal=b,globalVar.currentModalType="hotspot",globalVar.hotspotIdx=l)}e.each((function(e,i){var s=$(i);!0===t.hover?(s.off("mouseover.hotspot"),s.on("mouseover.hotspot",(function(){m(e,i)})),o.addClass("hover-hotspot")):(s.off("click.hotspot"),s.on("click.hotspot",(function(){m(e,i)})))}))}function resetHotspot(){hotspotFunctions()}function initMenu(){for(key in slides)if("menu"===slides[key].type){if(slides[key].menu){if(slides[key].menu.menuClass||(slides[key].menu.menuClass="si-menu__js"),slides[key].menu.linear||(slides[key].menu.linear=!1),!slides[key].menu.navigation){for(var e=slides[key].slideNumber,o=(l=$("#"+key).find("."+slides[key].menu.menuClass)).length,i=[],s=1;s<=o;s++)i.push(e+s);slides[key].menu.navigation=i}if(!slides[key].menu.completionIDs){e=slides[key].slideNumber,o=(l=$("#"+key).find("."+slides[key].menu.menuClass)).length;var a=[];for(s=1;s<=o;s++)for(id in slides)slides[id].slideNumber==(e+s).toString()&&a.push(id);slides[key].menu.completionIDs=a}}else{slides[key].menu={},slides[key].menu.menuClass="si-menu__js",slides[key].menu.linear=!1,slides[key].menu.completionIDs=a;var l=$("#"+key).find("."+slides[key].menu.menuClass);for(e=slides[key].slideNumber,o=l.length,i=[],a=[],s=1;s<=o;s++)for(id in i.push(e+s),slides)slides[id].slideNumber==(e+s).toString()&&a.push(id);slides[key].menu.navigation=i,slides[key].menu.completionIDs=a}if(slides[key].menu.navigation.length)(l=$("#"+key).find("."+slides[key].menu.menuClass)).each((function(e,o){var i=slides[key];$(o).on("click.nav",(function(){jumpToId(i.menu.navigation[e])}))}));if(slides[key].menu.linear)lock(l=$("#"+key).find("."+slides[key].menu.menuClass)),unlock($(l[0])),$(l[0]).addClass("unlocked")}}function menuFunctions(){var e=$("#"+globalVar.curSlide).find("."+slides[globalVar.curSlide].menu.menuClass),o=slides[globalVar.curSlide].menu.linear,i=slides[globalVar.curSlide].menu.completionIDs,s=!0;i.length&&i.forEach((function(i,a){getCompletionStatus(i)?($(e[a]).addClass("completed"),o&&e[a+1]&&($(e).removeClass("unlocked"),unlock($(e[a+1])),$(e[a+1]).addClass("unlocked"))):s=!1})),slides[globalVar.curSlide].menu.allComplete=!!s}function sortFunctions(){!1===slides[globalVar.curSlide].visited&&globalVar.$curSlide.find(".sortable").each((function(e,o){var i=o.id;slides[globalVar.curSlide].sort.sortables[i]?(slides[globalVar.curSlide].sort.sortables[i].options?$(o).sortable(slides[globalVar.curSlide].sort.sortables[i].options):$(o).sortable(),slides[globalVar.curSlide].sort.sortables[i].answer||(slides[globalVar.curSlide].sort.sortables[i].answer=$(o).sortable("toArray"))):$(o).sortable();var s=$("#"+i+"> div"),a=$("#"+i+"> div");s.each((function(e,i){sortKeyboard(i,o)})),$(o).data({elements:s,shuffle:a})}));!0===slides[globalVar.curSlide].sort.randomize&&globalVar.$curSlide.find(".sortable").each((function(e,o){for(var i=$(o).data("elements"),s=[];s.length<i.length;){var a=Math.floor(Math.random()*i.length);s.some((function(e){return e===a}))||s.push(a)}for(var l=0;l<i.length;l++)$(o).data("shuffle")[l]=$(o).data("elements")[s[l]]}));if(slides[globalVar.curSlide].sort.randomizeConnect&&"string"==typeof slides[globalVar.curSlide].sort.randomizeConnect){var e=$("."+slides[globalVar.curSlide].sort.randomizeConnect),o=[],i=[];for(e.each((function(e,i){$(i).find("div").each((function(e,i){o.push(i)}))}));o.length;){var s=Math.floor(Math.random()*o.length);element=o.splice(s,1),i.push(element[0])}for(var a=0;i.length;)e.each((function(e,o){$(o).data("shuffle")[a]=i.shift()})),a++}resetSort()}function resetSort(){globalVar.$curSlide.find(".sortable").each((function(e,o){slides[globalVar.curSlide].sort.randomizeConnect?$(o).append($(o).data("shuffle")):!1===slides[globalVar.curSlide].sort.randomize||void 0===slides[globalVar.curSlide].sort.randomize?$(o).append($(o).data("elements")):$(o).append($(o).data("shuffle"))}))}function sortKeyboard(e,o){var i=$(o).sortable("option","connectWith");$(e).attr("tabindex",0).on("keydown",(function(e){if(87!==e.which&&65!==e.which||$(this).insertBefore($(this).prev()),83!==e.which&&68!==e.which||$(this).insertAfter($(this).next()),81===e.which&&$(this).parent().prepend($(this)),69===e.which&&$(this).parent().append($(this)),i&&88===e.which){var o,s=[];$(i).each((function(i,a){$(a).find(e.target)[0]?o=i:s.push(a)})),s[o]?$(s[o]).append($(this)):$(s[0]).append($(this))}$(this).focus()}))}function resetQuiz(){$("#"+globalVar.curSlide+" .si-quiz__js li").removeClass("si-quiz-selected")}function initQuiz(){for(key in slides)"quiz"===slides[key].type&&("undefined"===slides[key].quiz.radio?slides[key].quiz.radio=!1:slides[key].quiz.radio&&$("#"+key+" .si-quiz__js").addClass("si-radio__js"));var e=$(".si-quiz__js"),o=globalVar.buttonType;e.each((function(e,i){var s=$(i).find("li"),a=$(i).find("div"),l=!!$(i).hasClass("si-radio__js");s.each((function(e,o){$(o).addClass("si-quiz-answer").attr("tabindex","0"),$(o).on("click.quiz",(function(){siAudio.sfx.click.play(),l&&s.removeClass("si-quiz-selected"),$(this).hasClass("si-quiz-selected")?$(this).removeClass("si-quiz-selected"):$(this).addClass("si-quiz-selected")})),$(o).on("keyup.quiz",(function(){13===event.which&&(siAudio.sfx.click.play(),l&&s.removeClass("si-quiz-selected"),$(this).hasClass("si-quiz-selected")?$(this).removeClass("si-quiz-selected"):$(this).addClass("si-quiz-selected"))}))})),a.each((function(e,i){var s=$(i).children().eq(0);l?$(s).attr("src",(function(e,o){return o.replace("mcq","scq")})):$(s).attr("src",(function(e,o){return o.replace("scq","mcq")})),$(i).find("img").attr("src",(function(e,i){return i.replace("classic",o)}))}))}))}function quizFunction(){var e=slides[globalVar.curSlide].quiz.answers,o=$("#"+globalVar.curSlide+" .si-quiz__js li");!slides[globalVar.curSlide].visited&&globalVar.devMode?o.each((function(o,i){e[$(i).attr("id")]&&$(i).css("color","blue")})):resetQuiz()}function formFunctions(){var e=$("#"+globalVar.curSlide+" form");slides[globalVar.curSlide].form.dontGenerate||generateForm(e);var o=!!e.find("input[type=submit]").length;e.addClass("form-style"),e.trigger("reset"),o||e.append('<input type="submit"/>'),e.on("submit.req-form",(function(e){e.preventDefault()}));var i=e.find("input");i.keyup((function(){var e=$(this),o=e.val().length,i=e.attr("maxLength"),s=e.next().hasClass("checkbox");o!=i||s||e.next().focus()})),i.keydown((function(e){8!=e.which&&46!=e.which||""!=$(this).val()||$(this).prev("input").focus()}))}function checkForm(){var e=slides[globalVar.curSlide].form.fields;for(var o in e){var i=e[o],s="",a=$("#"+globalVar.curSlide+" ."+i.class),l=i.answer,t=e[o].caseSensitive,n="";if(i.answer){if("checkbox"===i.type){var r=a.filter(":checked")[0];r&&(n=r.value)}else a.each((function(e,o){n+=o.value}));if(t||(l=l.toLowerCase(),n=n.toLowerCase()),s=n===l,console.log(n,l),console.log(s),!s)return!1}}return!0}function validForm(){var e=!0;return $("#"+globalVar.curSlide).find("input,textarea,select").filter("[required]").each((function(o,i){if(""===i.value)return e=!1,$("#"+globalVar.curSlide+" form").find("input[type=submit]").trigger("click"),!1})),e}function generateForm(e){var o=slides[globalVar.curSlide].form.fields;for(var i in e.html(""),o){var s=o[i],a=globalVar.curSlide.toLowerCase()+"-"+s.class;if(s.label){var l=document.createElement("label");l.htmlFor=a,$(l).text(s.label),e.append(l)}switch(s.type){case"checkbox":s.options.forEach((function(o){var i=o.toLowerCase().split(" ").join("-"),a=document.createElement("input"),l=document.createElement("label");switch(l.htmlFor=s.class+"-"+i,$(l).addClass(s.class+"-container radio-container"),a.setAttribute("type","radio"),a.id=s.class+"-"+i,a.required=!s.optional,a.name=s.class,a.value=o,$(a).addClass(s.class),e.append(l),$(l).append(a),s.style){case"x":var t=document.createElement("span");$(a).addClass("hide-radio"),$(t).addClass(s.class+"-style x-style"),$(l).append(t);break;case"dot":t=document.createElement("span");$(a).addClass("hide-radio"),$(t).addClass(s.class+"-style dot-style"),$(l).append(t)}if(s.labels){var n=document.createElement("span");$(n).addClass(s.class+"-option-label"),$(n).text(o),$(l).append(n)}}));break;case"dropdown":var t=document.createElement("select");t.id=a,t.required=!s.optional,$(t).addClass(s.class+" "+s.class+"-style"),$(t).append('<option value="">Select One</option>'),s.options.forEach((function(e){$(t).append('<option value="'+e+'">'+e+"</option>")})),e.append(t);break;default:if(s.separate)for(var n=0;n<s.answer.length;n++){var r=document.createElement("input");n||(r.id=a),r.setAttribute("type","text"),r.maxLength=1,r.required=!s.optional,$(r).addClass(s.class+" "+s.class+"-style "+s.class+"-"+(n+1)+"-style separated"),e.append(r)}else(r=document.createElement("input")).setAttribute("type","text"),r.required=!s.optional,r.id=a,s.maxLength&&(r.maxLength=s.maxLength),s.placeholder&&(r.placeholder=s.placeholder),$(r).addClass(s.class+" "+s.class+"-style"),e.append(r)}}}var curChapter,chapterNavigationSlides=["V1","I1","I2","I3"],chapterCompletionSlides=["V1","I1","I2","I3"];function initSideMenu(){var e=$("#si-side-menu"),o=$("#si-side-menu-container"),i=$(".si-menu-navigation").find("button");e.on("click.stop",(function(e){e.stopPropagation()})),o.on("click.side",(function(e){closeSideMenu()})),i.each((function(e,o){$(o).on("click.side",(function(){jumpToId(chapterNavigationSlides[e]),closeSideMenu()}))}))}function openSideMenu(){var e=$("#si-side-menu");$("#si-side-menu-container").addClass("menu-open"),e.addClass("menu-open");var o=slides[globalVar.curSlide].type;slides[globalVar.curSlide].videoLoaded&&"video"==o&&videojs(globalVar.$curSlide.find("video")[0].id).pause(),handleSideButtons()}function closeSideMenu(){var e=$("#si-side-menu");$("#si-side-menu-container").removeClass("menu-open"),e.removeClass("menu-open");var o=slides[globalVar.curSlide].type;slides[globalVar.curSlide].videoLoaded&&"video"==o&&videojs(globalVar.$curSlide.find("video")[0].id).paused()&&videojs(globalVar.$curSlide.find("video")[0].id).play()}function handleSideButtons(){var e=$(".si-menu-navigation").find("button"),o=$(".si-menu-checks__js");lock($(e)),unlock($(e[0])),e.each((function(i,s){getCompletionStatus(chapterCompletionSlides[i])&&($(o[i]).addClass("completed"),e[i+1]&&unlock($(e[i+1])))}))}function initNavigation(){var e=$(".si-nav-style__js"),o=$(".si-img-swap__js"),i=globalVar.buttonType;o.each((function(e,o){$(o).attr("src",(function(e,o){return o.replace("classic",i)}))})),e.each((function(e,o){$(o).addClass("si-nav-style-"+i)})),attachNavEventListeners()}function showNavElements(){var e=$(".si-nav__js"),o="si-click-icon si-drag-up-icon si-drag-down-icon si-drag-left-icon si-drag-right-icon",i=$("#si-click-icon");$(e).hide(),i.removeClass(o),void 0===slides[globalVar.curSlide].navElements&&(slides[globalVar.curSlide].navElements=[]),slides[globalVar.curSlide].navElements.forEach((function(e){switch(e){case"start-slide":$("#si-clock").show(),$("#si-start").show();break;case"standard-home":$("#si-logo").show(),$("#si-progress").show(),$("#si-home").show(),$("#si-back").show(),getCompletionStatus()&&$("#si-next").show();break;case"standard-menu":$("#si-logo").show(),$("#si-progress").show(),$("#si-menu").show(),$("#si-back").show(),getCompletionStatus()&&$("#si-next").show();break;case"exit-slide":$("#si-progress").show(),$("#si-exit").show(),$("#si-replay").show();break;case"click-icon":case"drag-up-icon":case"drag-down-icon":case"drag-left-icon":case"drag-right-icon":i.show().removeClass(o).addClass("si-"+e),hideClickIcon();break;default:"!"===e[0]?$("#si-"+e.split("!")[1]).hide():$("#si-"+e).show()}}))}function attachNavEventListeners(){$("#si-home").on("click touch",(function(){siAudio.sfx.click.play(),jumpToSlide(globalVar.homeSlide)})),$("#si-menu").on("click touch",(function(){siAudio.sfx.click.play(),openSideMenu()})),$("#si-full").on("click touch",(function(){siAudio.sfx.click.play(),toggleFullscreen()})),$("#si-back").on("click touch",(function(){siAudio.sfx.click.play(),setTimeout((function(){slides[globalVar.curSlide].backAction?slides[globalVar.curSlide].backAction():prevSlide()}),100)})),$("#si-next").on("click touch",(function(){siAudio.sfx.click.play(),setTimeout((function(){slides[globalVar.curSlide].nextAction?slides[globalVar.curSlide].nextAction():nextSlide()}),100)})),$("#si-replay").on("click touch",(function(){siAudio.sfx.click.play(),jumpToSlide(0)})),$("#si-exit").on("click touch",(function(){siAudio.sfx.click.play(),window.close()})),$("#si-start").on("click touch",(function(){siAudio.sfx.click.play(),slides[globalVar.curSlide].nextAction?slides[globalVar.curSlide].nextAction():nextSlide()})),$("#si-submit").on("click touch",(function(){var e=slides[globalVar.curSlide];("form"!==e.type||validForm())&&(siAudio.sfx.click.play(),handleAnswer(checkQuestion(e.type)))})),$("#si-reset").on("click touch",(function(){switch(siAudio.sfx.click.play(),slides[globalVar.curSlide].type){case"dnd":var e=dndResetObject[globalVar.curSlide];resetDnD(e.time,e.answers);break;case"sort":resetSort();break;case"quiz":resetQuiz();break;case"hotspot":resetHotspot();default:slides[globalVar.curSlide].customReset&&slides[globalVar.curSlide].customReset()}})),$("#si-custom-submit").on("click touch",(function(){("form"!==slides[globalVar.curSlide].type||validForm())&&(siAudio.sfx.click.play(),slides[globalVar.curSlide].customSubmit&&slides[globalVar.curSlide].customSubmit())})),$(".si-menu-closer").on("click touch",(function(){closeSideMenu()}))}function hideClickIcon(){$("#"+globalVar.curSlide).off("mousedown.icon"),$("#"+globalVar.curSlide).on("mousedown.icon",(function(){$("#si-click-icon").hide(),$("#"+globalVar.curSlide).off("mousedown.icon")}))}function toggleFullscreen(){var e,o=document.documentElement;document.fullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement?(e=document.exitFullscreen||document.webkitExitFullscreen||document.webkitExitFullScreen||document.mozCancelFullScreen||document.msExitFullscreen)&&e.apply(document):(e=o.requestFullscreen||o.webkitRequestFullscreen||o.webkitRequestFullScreen||o.mozRequestFullScreen||o.msRequestFullscreen)&&e.apply(o)}var bookmarkedSlide,saveData={},chartProgressRecorded={};function firstTimeSetup(){Object.keys(slides).forEach((function(e,o){var i=slides[e].type;if(void 0===slides[e].slideNumber&&(slides[e].slideNumber=o+1),void 0!==slides[e][i]?(void 0===slides[e][i].userAttempts&&(slides[e][i].userAttempts=0),void 0===slides[e][i].trys&&(slides[e][i].trys=0)):slides[e][i]={userAttempts:0,trys:0},void 0===slides[e].include&&(slides[e].include=!0),slides[e].include){var s=slides[e].completionPath;saveData.slideCompletion||(saveData.slideCompletion={});var a=saveData.slideCompletion;s?Array.isArray(s)?s.forEach((function(o,i){a[o]||(a[o]={}),a[o][e]||(a[o][e]=0)})):(a[s]||(a[s]={}),a[s][e]||(a[s][e]=0)):(a.mainPath||(a.mainPath={}),a.mainPath[e]||(a.mainPath[e]=0))}}))}function documentSetup(){for(key in initPreloader(),globalVar.curSlide=$("section.present")[0].id,firstTimeSetup(),initAudio(),$("aside").remove(),initNavigation(),initSideMenu(),slides)"video"==slides[key].type&&(globalVar.videoSeen[key]=!1);globalVar.devMode&&devMode(),0!=$("#si-progress-meter").length&&chartInitiate(),initFeedbacks(),initQuiz(),initMenu(),functionCalls(),randomizeQuestionSlides(),Reveal.addEventListener("slidechanged",(function(e){$("#si-nav-container").removeClass("vjs-fade-out"),globalVar.curSlide=e.currentSlide.id,globalVar.$curSlide=$(e.currentSlide),closeSideMenu(),slides[e.previousSlide.id]&&"function"==typeof slides[e.previousSlide.id].onExitAction&&slides[e.previousSlide.id].onExitAction(),functionCalls()}));var e=$(".slides").width()/globalVar.fontSizeFactor;$("html").css("font-size",e),$(window).resize((function(){setTimeout((function(){var e=$(".slides").width()/globalVar.fontSizeFactor;$("html").css("font-size",e)}),1)})),$("img").on("dragstart",(function(e){e.preventDefault()}))}function actionsOnEverySlideEnter(){}function onEnterAction(e){void 0===slides[e].visited&&(slides[e].visited=!1),$(document.activeElement).blur(),siAudio[globalVar.curSlide].onEnter?siAudio.sfx.click.playing()?siAudio.sfx.click.once("end",(function(){Howler.stop(),siAudio[globalVar.curSlide].onEnter.play()})):(Howler.stop(),siAudio[globalVar.curSlide].onEnter.play()):siAudio.sfx.click.playing()?siAudio.sfx.click.once("end",(function(){Howler.stop()})):Howler.stop(),setTimeout((function(){void 0!==slides[e].onEnterAction&&slides[e].onEnterAction(),slides[e].visited=!0}),10),lmsConnected&&"start"!==e&&setTimeout((function(){saveLMS()}),1e3),useLocal&&"start"!==e&&saveProgressLocally()}function functionCalls(){switch($("body").off(),globalVar.$curSlide=$(".slides > section.present"),globalVar.curSlide=$(".slides > .present")[0].id,onEnterAction(globalVar.curSlide),actionsOnEverySlideEnter(),showNavElements(),elementsFadingOnSlide(),slides[globalVar.curSlide].type){case"menu":menuFunctions();break;case"dnd":dndFunctions();break;case"sort":sortFunctions();break;case"hotspot":hotspotFunctions();break;case"form":formFunctions();break;case"quiz":quizFunction();break;case"video":videoCheck()}0!=$("#si-progress-meter").length&&chartProgress(),setTimeout((function(){$("section.future").css("display","none"),$("section.past").css("display","none")}),55)}function checkQuestion(e){var o=!0;switch(e){case"quiz":var i=slides[globalVar.curSlide].quiz.answers,s={},a=$("#"+globalVar.curSlide+" .si-quiz-answer");for(answer in a.each((function(e,o){var a=$(o).attr("id");$(o).hasClass("si-quiz-selected")?s[a]=1:s[a]=0,i[a]||(i[a]=0)})),s)if(i[answer]!==s[answer])return o=!1;if(!o)return o;break;case"hotspot":var l=slides[globalVar.curSlide].hotspot.quiz;if(!l)throw'\nHotspot Error:\nyou have to turn on the "quiz" settings to use hotspots this way';if(!l.answers.length)throw"\nHotspot Error:\nquiz answers must be in an array";if("scq"===l.type&&l.answers.length>1)throw'\nHotspot Error:\nfor type "scq" you must have only one answer';i=l.answers,s=l.selectedAnswers;o=JSON.stringify(s)===JSON.stringify(i);break;case"form":if(!(o=checkForm()))return;break;case"dnd":var t=globalVar.dndAnswers;for(key in slides[globalVar.curSlide].dnd.quiz){var n=slides[globalVar.curSlide].dnd.quiz[key].sort(),r=t[key].sort();if(slides[globalVar.curSlide].dnd.multipleAnswers){var d=!0;if((0===r.length||n.indexOf(r[0])<0)&&(d=!1),!d)return o=!1}else{if(n.length!==r.length)return o=!1;n.forEach((function(e,i){if(r[i]!==e)return o=!1}))}if(!1===o)return o}break;case"sort":o=!0;var c=Object.keys(slides[globalVar.curSlide][e].sortables),u=[];if(c.forEach((function(o){u.push(slides[globalVar.curSlide][e].sortables[o].answer)})),c.length!==u.length)return o=!1;c.forEach((function(i,s){var a=$("#"+i).sortable("toArray");if(a.length!==u[s].length)return o=!1;!1===slides[globalVar.curSlide][e].unordered||void 0===slides[globalVar.curSlide][e].unordered?a.forEach((function(e,i){if(e!==u[s][i])return o=!1})):a.forEach((function(e){if(!u[s].some((function(o){return o===e})))return o=!1}))}));break;default:o=!1}return o}function jumpToShuffledSlide(e){var o=globalVar.shuffledSlides[e].pointer;o<globalVar.shuffledSlides[e].slides.length&&(null==o&&(o=0),jumpToSlide(globalVar.shuffledSlides[e].slides[o]),o++,globalVar.shuffledSlides[e].pointer=o)}function resetShuffledSlide(e){globalVar.shuffledSlides[e].pointer=null}function randomizeQuestionSlides(){if(1==globalVar.randomizeSlides.useRandomize){var e=globalVar.randomizeSlides.slides,o=[];if(0!=Object.keys(e))for(key in e)if(o=[],e[key][0]<e[key][1]){for(var i=e[key][0];i<=e[key][1];i++)o.push(i);shuffle(o),o.push(e[key][2]),globalVar.shuffledSlides[key]={slides:o,pointer:null}}}}function elementsFadingOnSlide(){if(0!=$("#"+globalVar.curSlide+" [data-fadeInOrder]").length){var e=[];$("#"+globalVar.curSlide+" [data-fadeInOrder]").each((function(){$(this).css("opacity","0"),$(this).css("display","none"),$(this).hide();var o=[],i=$(this).data("fadeinorder");o[0]=i,o[1]=$(this)[0],e.push(o)})),e.sort(sortArrayMatrixFunction);for(var o=0;o<e.length;o++)elementsFadeIn(e[o][1],e[o][0])}if(0!=$("#"+globalVar.curSlide+" [data-fadeoutorder]").length){e=[];$("#"+globalVar.curSlide+" [data-fadeoutorder]").each((function(){$(this).css("opacity","1"),$(this).css("display","block"),$(this).show();var o=[],i=$(this).data("fadeoutorder");o[0]=i,o[1]=$(this)[0],e.push(o)})),e.sort(sortArrayMatrixFunction);for(o=0;o<e.length;o++)elementsFadeOut(e[o][1],e[o][0])}}function elementsFadeIn(e,o){setTimeout((function(){$(e).fadeTo("fast",1)}),o)}function elementsFadeOut(e,o){setTimeout((function(){$(e).fadeTo("fast",0)}),o)}function sortArrayMatrixFunction(e,o){return e[0]===o[0]?0:e[0]<o[0]?-1:1}function shuffle(e){for(var o,i,s=e.length;0!==s;)i=Math.floor(Math.random()*s),o=e[s-=1],e[s]=e[i],e[i]=o;return e}$(document).ready((function(){initCourse(),documentSetup(),chartProgress(),globalVar.devMode||!lmsConnected&&!useLocal||jumpToSlide(bookmarkedSlide);var e=document.querySelectorAll("img.inject-me");SVGInjector(e)})),Array.prototype.equals=function(e){if(!e)return!1;if(this.length!=e.length)return!1;for(var o=0,i=this.length;o<i;o++)if(this[o]instanceof Array&&e[o]instanceof Array){if(!this[o].equals(e[o]))return!1}else if(this[o]!=e[o])return!1;return!0},Object.defineProperty(Array.prototype,"equals",{enumerable:!1});var scorm=pipwerks.SCORM,lmsConnected=!1,unloaded=!1,useLocal=!1,courseURL=btoa(window.location.href.toString()),progressURL="progress"+courseURL,bookmarkURL="bookmark"+courseURL;function initCourse(){globalVar.scormSettings.useScorm?"aicc"!==globalVar.scormSettings.standard.toLowerCase()?connectToSCORMAPI():connectToAICCAPI():siLog("SCORM","INFO","SCORM is disabled.")}function connectToAICCAPI(){var e=window.parent;"function"==typeof e.SetReachedEnd&&"function"==typeof e.CommitData?(siLog("AICC","API","SUCCESS: AICC API found!"),siLog("AICC","INIT","SUCCESS: Course is now connected to the LMS!")):(siLog("AICC","API","ERROR: AICC API not found!"),siLog("AICC","INIT","ERROR: Course could not connect to the LMS!"))}function connectToSCORMAPI(){var e,o;if(useLocal&&storageAvailable("localStorage")&&(e=localStorage.getItem(bookmarkURL),o=JSON.parse(localStorage.getItem(progressURL))),lmsConnected=scorm.init()){siLog("SCORM","INIT","SUCCESS: Course is now connected with the LMS!");var i,s,a=scorm.get("cmi.suspend_data");"2004"===scorm.version?(scorm.get("cmi.completion_status"),scorm.get("cmi.learner_name"),i=scorm.get("cmi.location")):(scorm.get("cmi.core.lesson_status"),scorm.get("cmi.core.student_name"),i=scorm.get("cmi.core.lesson_location")),a&&"string"==typeof a?(s=JSON.parse(a),saveData=s):o&&(saveData=o),bookmarkedSlide=i||(e||1),window.addEventListener("unload",unloadHandler),window.addEventListener("beforeunload",unloadHandler)}else siLog("SCORM","INIT","ERROR: Course could not connect with the LMS"),o&&(saveData=o),bookmarkedSlide=e||1}function setScormCompletion(){var e=!1;if(globalVar.scormSettings.useScorm)if("aicc"===globalVar.scormSettings.standard){var o=window.parent;"function"==typeof o.SetReachedEnd&&"function"==typeof o.CommitData?siLog("AICC","COMPLETE",(e=o.SetReachedEnd()&&o.CommitData())?"SUCCESS: Course was successfully set to complete!":"ERROR: Course could not be set to complete!"):siLog("AICC","COMPLETE","ERROR: Course is not connected to the LMS")}else lmsConnected?("2004"===scorm.version?(e=scorm.set("cmi.completion_status","completed"),scorm.set("cmi.success_status","passed"),scorm.set("cmi.score.raw","100"),scorm.set("cmi.score.scaled","1")):(e=scorm.set("cmi.core.lesson_status","completed"),scorm.set("cmi.core.score.raw","100")),e?(scorm.save(),siLog("SCORM","COMPLETE","SUCCESS: Course was successfully set to complete!")):siLog("SCORM","COMPLETE","ERROR: Course could not be set to complete!")):siLog("SCORM","COMPLETE","ERROR: Course is not connected to the LMS")}function setScormIncomplete(){var e;lmsConnected?("2004"===scorm.version?(e=scorm.set("cmi.completion_status","completed"),scorm.set("cmi.success_status","failed"),scorm.set("cmi.score.raw","0"),scorm.set("cmi.score.scaled","1")):(e=scorm.set("cmi.core.lesson_status","incomplete"),scorm.set("cmi.core.score.raw","0")),e?(scorm.save(),siLog("SCORM","INCOMPLETE","SUCCESS: Course was successfully set to incomplete!")):siLog("SCORM","INCOMPLETE","ERROR: Course could not be set to incomplete!")):siLog("SCORM","INCOMPLETE","ERROR: Course is not connected to the LMS")}function unloadHandler(){lmsConnected&&!unloaded&&(saveLMS(),scorm.save(),scorm.quit(),unloaded=!0)}function saveLMS(){saveCourseProgress()&&saveBookmark()?scorm.save():siLog("SCORM","Failed to Save")}function saveCourseProgress(){var e,o=JSON.stringify(saveData);return lmsConnected&&(e=scorm.set("cmi.suspend_data",o)),e}function saveBookmark(){var e;return bookmarkedSlide=slides[globalVar.curSlide].slideNumber||"0",lmsConnected&&(e="2004"===scorm.version?scorm.set("cmi.location",bookmarkedSlide):scorm.set("cmi.core.lesson_location",bookmarkedSlide)),e}function saveProgressLocally(){bookmarkedSlide=slides[globalVar.curSlide].slideNumber||"0";var e=JSON.stringify(saveData);storageAvailable("localStorage")&&(localStorage.setItem(progressURL,e),localStorage.setItem(bookmarkURL,bookmarkedSlide))}function storageAvailable(e){var o;try{o=window[e];var i="__storage_test__";return o.setItem(i,i),o.removeItem(i),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&o&&0!==o.length}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,